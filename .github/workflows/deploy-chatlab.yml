name: Deploy ChatLab to AWS (One-Click)

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: "AWS region (e.g., us-east-1)"
        required: true
        default: "us-east-1"
      project_name:
        description: "Name for this deployment"
        required: true
        default: "chatlab"
      root_domain:
        description: "Base domain in Route53 (e.g., salvatoregiorgi.com)"
        required: true
      subdomain:
        description: "Subdomain for ChatLab (e.g., chatlab)"
        required: true
        default: "chatlab"
      db_username:
        description: "Database username"
        required: true
      db_password:
        description: "Database password"
        required: true
        type: secret

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Apply
        id: tf
        working-directory: infra
        run: terraform destroy -auto-approve -var "aws_region=${{ github.event.inputs.aws_region }}" -var "project_name=${{ github.event.inputs.project_name }}" -var "db_username=${{ github.event.inputs.db_username }}" -var "db_password=${{ github.event.inputs.db_password }}" -var "root_domain=${{ github.event.inputs.root_domain }}" -var "subdomain=${{ github.event.inputs.subdomain }}"


      # - name: Read Terraform Outputs
      #   id: tf_outputs
      #   working-directory: infra
      #   run: |
      #     echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket)" >> $GITHUB_ENV
      #     echo "RDS_ENDPOINT=$(terraform output -raw rds_endpoint)" >> $GITHUB_ENV
      #     echo "BEANSTALK_URL=$(terraform output -raw beanstalk_url)" >> $GITHUB_ENV
      #     echo "CLOUDFRONT_DOMAIN=$(terraform output -raw cloudfront_domain)" >> $GITHUB_ENV
      #     echo "SITE_URL=$(terraform output -raw site_url)" >> $GITHUB_ENV

      - name: Build React Frontend
        working-directory: generic_chatbot_frontend
        env:
          CI: false
        run: |
          npm ci
          export REACT_APP_API_URL="${SITE_URL}/api"
          echo "Using REACT_APP_API_URL=$REACT_APP_API_URL"
          npm run build

      - name: Upload Frontend to S3
        run: |
          aws s3 sync frontend/build s3://$FRONTEND_BUCKET --delete
          echo "Uploaded to s3://$FRONTEND_BUCKET"

      - name: Invalidate CloudFront Cache
        run: |
          # Create an invalidation for root and all assets
          aws cloudfront create-invalidation \
            --distribution-id $(aws cloudfront list-distributions \
              --query "DistributionList.Items[?DomainName=='$CLOUDFRONT_DOMAIN'].Id" --output text) \
            --paths "/*"

      - name: Summary
        run: |
          echo "‚úÖ Deployed ChatLab"
          echo "üåê Site:  $SITE_URL"
          echo "üß† API:   $SITE_URL/api"
          echo "üóÑÔ∏è  DB:    $RDS_ENDPOINT"
          echo "üöÄ EB:     $BEANSTALK_URL"
