name: üöÄ Deploy ChatLab Infrastructure (Self-Healing)

on:
  workflow_dispatch:
    inputs:
      db_username:
        description: "Database username (e.g., admin)"
        required: true
        default: "admin"
      db_password:
        description: "Database password"
        required: true
      root_domain:
        description: "Base domain (e.g., chatlab-test.com)"
        required: true
      subdomain:
        description: "Subdomain (e.g., chatlab)"
        required: true
        default: "chatlab"
      force_rebuild:
        description: "Destroy and rebuild all infrastructure?"
        required: true
        default: "false"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy ChatLab
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4

      - name: üß© Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ü™£ Ensure Terraform backend exists
        run: |
          aws s3api head-bucket --bucket chatlab-terraform-state 2>/dev/null || aws s3 mb s3://chatlab-terraform-state
          aws dynamodb describe-table --table-name chatlab-locks 2>/dev/null || aws dynamodb create-table \
            --table-name chatlab-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST

      - name: ‚öôÔ∏è Initialize Terraform
        working-directory: infra
        run: terraform init -input=false

      - name: üîÑ Auto-import pre-existing AWS resources
        working-directory: infra
        run: |
          set -euo pipefail
          # IAM Role
          if aws iam get-role --role-name chatlab-eb-ec2-role >/dev/null 2>&1; then
            terraform import aws_iam_role.eb_ec2_role chatlab-eb-ec2-role || true
          fi
          # Instance Profile
          if aws iam get-instance-profile --instance-profile-name chatlab-eb-instance-profile >/dev/null 2>&1; then
            terraform import aws_iam_instance_profile.eb_instance_profile chatlab-eb-instance-profile || true
          fi
          # RDS Subnet Group
          if aws rds describe-db-subnet-groups --query "DBSubnetGroups[?DBSubnetGroupName=='chatlab-db-subnet'].DBSubnetGroupName" --output text | grep -q chatlab-db-subnet; then
            terraform import aws_db_subnet_group.chatlab_db_subnet chatlab-db-subnet || true
          fi
          # Elastic Beanstalk App
          if aws elasticbeanstalk describe-applications --query "Applications[?ApplicationName=='chatlab'].ApplicationName" --output text | grep -q chatlab; then
            terraform import aws_elastic_beanstalk_application.app chatlab || true
          fi
          # CloudFront OAC
          OAC_ID=$(aws cloudfront list-origin-access-controls --query "OriginAccessControls[?Name=='ChatLab-OAC'].Id" --output text || true)
          if [ -n "${OAC_ID:-}" ] && [ "${OAC_ID}" != "None" ]; then
            terraform import aws_cloudfront_origin_access_control.oac "$OAC_ID" || true
          fi

      - name: üí• Destroy first (if force_rebuild)
        if: ${{ github.event.inputs.force_rebuild == 'true' }}
        working-directory: infra
        run: |
          terraform destroy -auto-approve -input=false \
            -var="aws_region=us-east-1" \
            -var="project_name=chatlab" \
            -var="db_username=${{ github.event.inputs.db_username }}" \
            -var="db_password=${{ github.event.inputs.db_password }}" \
            -var="root_domain=${{ github.event.inputs.root_domain }}" \
            -var="subdomain=${{ github.event.inputs.subdomain }}" || true

      - name: üöÄ Apply Terraform Infrastructure
        working-directory: infra
        run: |
          terraform apply -auto-approve -input=false \
            -var="aws_region=us-east-1" \
            -var="project_name=chatlab" \
            -var="db_username=${{ github.event.inputs.db_username }}" \
            -var="db_password=${{ github.event.inputs.db_password }}" \
            -var="root_domain=${{ github.event.inputs.root_domain }}" \
            -var="subdomain=${{ github.event.inputs.subdomain }}"

      - name: üì¶ Export Terraform Outputs
        working-directory: infra
        run: |
          echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket)" >> $GITHUB_ENV
          echo "SITE_URL=$(terraform output -raw site_url)" >> $GITHUB_ENV

      - name: üß∞ Build Frontend
        working-directory: generic_chatbot_frontend
        env:
          CI: false
        run: |
          npm ci
          export REACT_APP_API_URL="${SITE_URL}/api"
          npm run build

      - name: ‚òÅÔ∏è Upload Frontend to S3
        run: |
          aws s3 sync generic_chatbot_frontend/build s3://$FRONTEND_BUCKET --delete
          echo "‚úÖ Deployed frontend to s3://$FRONTEND_BUCKET"
