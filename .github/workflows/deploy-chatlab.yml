name: üöÄ Deploy ChatLab Infrastructure (Timeout-Safe, Auto-Backend)

on:
  workflow_dispatch:
    inputs:
      db_username:
        description: "Database username (e.g., admin)"
        required: true
        default: "admin"
      db_password:
        description: "Database password"
        required: true
      root_domain:
        description: "Base domain (e.g., chatlab-test.com)"
        required: true
      subdomain:
        description: "Subdomain (e.g., chatlab)"
        required: true
        default: "chatlab"
      force_rebuild:
        description: "Destroy and rebuild all infrastructure?"
        required: true
        default: "false"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy ChatLab
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4

      - name: üß© Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Ensure backend before init
      - name: ü™£ Ensure Terraform backend bucket & lock table exist
        run: |
          echo "üîç Checking Terraform backend resources..."
          BUCKET_NAME="chatlab-terraform-state"
          TABLE_NAME="chatlab-locks"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "ü™£ Creating S3 backend bucket: $BUCKET_NAME"
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region us-east-1 \
              --create-bucket-configuration LocationConstraint=us-east-1 || true
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" \
              --public-access-block-configuration \
              "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
          fi

          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
            echo "üìò Creating DynamoDB lock table: $TABLE_NAME"
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          fi

          echo "‚úÖ Terraform backend ready."

      - name: ‚öôÔ∏è Initialize Terraform
        working-directory: infra
        run: terraform init -input=false

      - name: üîÑ Auto-import existing AWS resources (with timeouts)
        working-directory: infra
        run: |
          set -euo pipefail
          timeout_cmd() { timeout 120 bash -c "$1" || echo "‚è±Ô∏è Timed out: $1"; }

          echo "üîç Checking existing AWS resources for import..."

          timeout_cmd "aws iam get-role --role-name chatlab-eb-ec2-role >/dev/null 2>&1 && terraform import aws_iam_role.eb_ec2_role chatlab-eb-ec2-role || true"
          timeout_cmd "aws iam get-instance-profile --instance-profile-name chatlab-eb-instance-profile >/dev/null 2>&1 && terraform import aws_iam_instance_profile.eb_instance_profile chatlab-eb-instance-profile || true"
          timeout_cmd "aws rds describe-db-subnet-groups --query \"DBSubnetGroups[?DBSubnetGroupName=='chatlab-db-subnet'].DBSubnetGroupName\" --output text | grep -q chatlab-db-subnet && terraform import aws_db_subnet_group.chatlab_db_subnet chatlab-db-subnet || true"
          timeout_cmd "aws elasticbeanstalk describe-applications --query \"Applications[?ApplicationName=='chatlab'].ApplicationName\" --output text | grep -q chatlab && terraform import aws_elastic_beanstalk_application.app chatlab || true"

          OAC_ID=$(aws cloudfront list-origin-access-controls --query "OriginAccessControls[?Name=='ChatLab-OAC'].Id" --output text || true)
          if [ -n "${OAC_ID:-}" ] && [ "${OAC_ID}" != "None" ]; then
            timeout_cmd "terraform import aws_cloudfront_origin_access_control.oac $OAC_ID || true"
          fi

          echo "‚úÖ Import phase complete."

      - name: üßæ Print Terraform state summary
        working-directory: infra
        run: terraform state list || echo "‚ÑπÔ∏è No resources imported yet."

      - name: üí• Destroy existing infra (if force_rebuild)
        if: ${{ github.event.inputs.force_rebuild == 'true' }}
        working-directory: infra
        run: |
          terraform destroy -auto-approve -input=false \
            -var="aws_region=us-east-1" \
            -var="project_name=chatlab" \
            -var="db_username=${{ github.event.inputs.db_username }}" \
            -var="db_password=${{ github.event.inputs.db_password }}" \
            -var="root_domain=${{ github.event.inputs.root_domain }}" \
            -var="subdomain=${{ github.event.inputs.subdomain }}" || true

      - name: üöÄ Deploy Terraform Infrastructure
        working-directory: infra
        run: |
          terraform apply -auto-approve -input=false \
            -var="aws_region=us-east-1" \
            -var="project_name=chatlab" \
            -var="db_username=${{ github.event.inputs.db_username }}" \
            -var="db_password=${{ github.event.inputs.db_password }}" \
            -var="root_domain=${{ github.event.inputs.root_domain }}" \
            -var="subdomain=${{ github.event.inputs.subdomain }}"

      - name: üì¶ Save Terraform Outputs
        working-directory: infra
        run: |
          echo "FRONTEND_BUCKET=$(terraform output -raw frontend_bucket)" >> $GITHUB_ENV
          echo "SITE_URL=$(terraform output -raw site_url)" >> $GITHUB_ENV

      - name: üß∞ Build Frontend
        working-directory: generic_chatbot_frontend
        env:
          CI: false
        run: |
          npm ci
          export REACT_APP_API_URL="${SITE_URL}/api"
          echo "Building frontend with API URL: $REACT_APP_API_URL"
          npm run build

      - name: ‚òÅÔ∏è Upload Frontend to S3
        run: |
          aws s3 sync generic_chatbot_frontend/build s3://$FRONTEND_BUCKET --delete
          echo "‚úÖ Deployed frontend to s3://$FRONTEND_BUCKET"
