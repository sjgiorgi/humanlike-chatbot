name: üí£ Destroy ChatLab Infrastructure (Safe or Full Cleanup)

on:
  workflow_dispatch:
    inputs:
      db_username:
        description: "Database username (e.g., admin)"
        required: true
        default: "admin"
      db_password:
        description: "Database password"
        required: true
      root_domain:
        description: "Base domain (e.g., chatlab-test.com)"
        required: true
      subdomain:
        description: "Subdomain (e.g., chatlab)"
        required: true
        default: "chatlab"
      destroy_all:
        description: "Completely nuke Terraform backend + AWS resources?"
        required: true
        default: "false"

permissions:
  contents: read

jobs:
  terraform-destroy:
    name: Tear Down ChatLab Resources
    runs-on: ubuntu-latest
    timeout-minutes: 40

    env:
      AWS_REGION: us-east-1
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4

      - name: üß© Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ü™£ Ensure Remote Terraform Backend Exists
        run: |
          echo "Checking for Terraform state infrastructure..."
          aws s3api head-bucket --bucket chatlab-terraform-state 2>/dev/null || \
            aws s3 mb s3://chatlab-terraform-state
          aws dynamodb describe-table --table-name chatlab-locks 2>/dev/null || \
            aws dynamodb create-table \
              --table-name chatlab-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          echo "‚úÖ Terraform backend ready."

      - name: ‚öôÔ∏è Initialize Terraform
        working-directory: infra
        run: terraform init -input=false

      - name: üß† Show Destruction Plan
        working-directory: infra
        run: |
          terraform plan -destroy -input=false \
            -var="aws_region=us-east-1" \
            -var="project_name=chatlab" \
            -var="db_username=${{ github.event.inputs.db_username }}" \
            -var="db_password=${{ github.event.inputs.db_password }}" \
            -var="root_domain=${{ github.event.inputs.root_domain }}" \
            -var="subdomain=${{ github.event.inputs.subdomain }}"

      - name: üí• Destroy Terraform Resources
        working-directory: infra
        run: |
          terraform destroy -auto-approve -input=false \
            -var="aws_region=us-east-1" \
            -var="project_name=chatlab" \
            -var="db_username=${{ github.event.inputs.db_username }}" \
            -var="db_password=${{ github.event.inputs.db_password }}" \
            -var="root_domain=${{ github.event.inputs.root_domain }}" \
            -var="subdomain=${{ github.event.inputs.subdomain }}" || true

      - name: üßπ Force cleanup of leftover AWS resources
        run: |
          echo "üßπ Cleaning up any residual AWS resources..."
          
          # IAM Role + Instance Profile
          aws iam get-role --role-name chatlab-eb-ec2-role 2>/dev/null && \
            aws iam delete-role --role-name chatlab-eb-ec2-role || echo "IAM role clean."
          aws iam get-instance-profile --instance-profile-name chatlab-eb-instance-profile 2>/dev/null && \
            aws iam delete-instance-profile --instance-profile-name chatlab-eb-instance-profile || echo "Instance profile clean."

          # Elastic Beanstalk App
          aws elasticbeanstalk describe-applications --query "Applications[?ApplicationName=='chatlab'].ApplicationName" --output text | \
            grep chatlab && aws elasticbeanstalk delete-application --application-name chatlab --terminate-env-by-force || echo "EB app clean."

          # RDS Subnet Group
          aws rds describe-db-subnet-groups --query "DBSubnetGroups[?DBSubnetGroupName=='chatlab-db-subnet'].DBSubnetGroupName" --output text | \
            grep chatlab-db-subnet && aws rds delete-db-subnet-group --db-subnet-group-name chatlab-db-subnet || echo "RDS subnet clean."

          # CloudFront OAC
          aws cloudfront list-origin-access-controls \
            --query "OriginAccessControls[?Name=='ChatLab-OAC'].Id" --output text | \
            xargs -I {} aws cloudfront delete-origin-access-control --id {} || echo "OAC clean."

          # Route53 Cleanup
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name ${{ github.event.inputs.root_domain }} --query "HostedZones[0].Id" --output text)
          aws route53 list-resource-record-sets \
            --hosted-zone-id $HOSTED_ZONE_ID \
            --query "ResourceRecordSets[?Name | contains('_26cb8c89a480906084b2ffdfc7469a7b')]" \
            --output json | jq -r '.[].Name' | while read RECORD; do
              aws route53 change-resource-record-sets \
                --hosted-zone-id $HOSTED_ZONE_ID \
                --change-batch "{\"Changes\": [{\"Action\": \"DELETE\", \"ResourceRecordSet\": {\"Name\": \"$RECORD\", \"Type\": \"CNAME\"}}]}" || true
            done

          echo "‚úÖ Partial cleanup complete."

      - name: ‚ò†Ô∏è Optional Full Reset (Destroy All Terraform + Backend)
        if: ${{ github.event.inputs.destroy_all == 'true' }}
        run: |
          echo "üî• Destroying ALL AWS + Terraform backend resources..."
          aws rds delete-db-instance --db-instance-identifier chatlab-db --skip-final-snapshot || true
          aws s3 rb s3://chatlab-${{ github.event.inputs.subdomain }}-frontend --force || true
          aws s3 rb s3://chatlab-terraform-state --force || true
          aws dynamodb delete-table --table-name chatlab-locks || true
          echo "‚úÖ Full reset complete. All state + infrastructure removed."
