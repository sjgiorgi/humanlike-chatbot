name: Deploy Humanlike-Bot Client and Server to Production

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy_frontend:
    name: Deploy Frontend Humanlike-Bot Client to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          cd generic_chatbot_frontend
          npm install

      - name: Build frontend
        env:
          REACT_APP_API_URL: https://bot.wwbp.org/api
          CI: false
        run: |
          cd generic_chatbot_frontend
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: us-west-2

      - name: Sync S3 bucket
        run: |
          aws s3 rm s3://${{ secrets.AWS_S3_PROD_BUCKET_NAME_FRONTEND }} --recursive
          aws s3 sync generic_chatbot_frontend/build/ s3://${{ secrets.AWS_S3_PROD_BUCKET_NAME_FRONTEND }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_PROD_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  deploy_backend:
    name: Deploy Backend Humanlike-Bot Server to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: us-west-2

      - name: Install AWS Elastic Beanstalk CLI
        run: |
          pip install awsebcli

      - name: Deploy Django to Elastic Beanstalk
        run: |
          cd generic_chatbot
          pwd
          ls -al
          head -n3 Dockerfile
          eb init -p docker ${{ secrets.AWS_BACKEND_APPLICATION_NAME }} --region us-east-1
          eb use ${{ secrets.AWS_PROD_BACKEND_ENVIRONMENT_NAME }}
          eb deploy --timeout 30